{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","tasks","item","checked","newItem","prompt","taskArray","filter","i","length","push","setState","x","map","splice","indexOf","_this2","react_default","a","createElement","className","id","type","onChange","toggleTask","onClick","delTask","newTask","bind","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAuFeA,qBAnFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,CACL,CACEC,KAAM,cACNC,SAAS,GAEX,CACED,KAAM,sBACNC,SAAS,KAVEV,yEAiBjB,IAAIW,EAAUC,OAAO,4BACjBC,EAAYV,KAAKI,MAAMC,MAC0C,IAAjEK,EAAUC,OAAO,SAACC,GAAO,OAAQA,EAAEN,OAASG,SAAUI,QACxDH,EAAUI,KAAK,CACbR,KAAME,EACND,SAAS,IAGbP,KAAKe,SAASL,mCAGRM,GACN,IAAIN,EAAYV,KAAKI,MAAMC,MAC3BK,EAAUO,IAAI,SAACL,GACTI,EAAEV,OAASM,EAAEN,MACfI,EAAUQ,OAAOR,EAAUS,QAAQP,GAAI,KAG3CZ,KAAKe,SAASL,sCAGLM,GACT,IAAIN,EAAYV,KAAKI,MAAMC,MAC3BK,EAAUO,IAAI,SAACL,GACTI,EAAEV,OAASM,EAAEN,OACfM,EAAEL,SAAYK,EAAEL,WAGpBP,KAAKe,SAASL,oCAGP,IAAAU,EAAApB,KACP,OACEqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,sBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,gCAAwBvB,KAAKI,MAAMC,MAAMQ,OAAzC,KACAQ,EAAAC,EAAAC,cAAA,gCAAwBvB,KAAKI,MAAMC,MAAMM,OAAO,SAACC,GAAQ,OAASA,EAAEL,UAAYM,OAAhF,MAEFQ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OACdH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIE,GAAG,YAAYD,UAAU,aAC1BxB,KAAKI,MAAMC,MAAMY,IAAI,SAACD,GACrB,OACEK,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,SAAOG,KAAK,WACLC,SAAU,kBAAMP,EAAKQ,WAAWZ,IAChCS,GAAIT,EAAEV,OACZU,EAAEV,KACHe,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aACVK,QAAS,kBAAMT,EAAKU,QAAQd,KADpC,wBASRK,EAAAC,EAAAC,cAAA,UAAQM,QAAS7B,KAAK+B,QAAQC,KAAKhC,MAAOwB,UAAU,cAApD,qBA7EQS,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.94661a99.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: [\n        {\n          item: \"Sample item\",\n          checked: false\n        },\n        {\n          item: \"Another sample item\",\n          checked: false\n        }\n      ],\n    }\n  }\n\n  newTask() {\n    let newItem = prompt(\"What do you want to add?\");\n    let taskArray = this.state.tasks;\n    if (taskArray.filter((i) => {return (i.item === prompt)}).length === 0) {\n      taskArray.push({\n        item: newItem,\n        checked: false\n      });\n    }\n    this.setState(taskArray);\n  }\n\n  delTask(x) {\n    let taskArray = this.state.tasks;\n    taskArray.map((i) => {\n      if (x.item === i.item) {\n        taskArray.splice(taskArray.indexOf(i), 1);\n      }\n    });\n    this.setState(taskArray);\n  }\n\n  toggleTask(x) {\n    let taskArray = this.state.tasks;\n    taskArray.map((i) => {\n      if (x.item === i.item) {\n        i.checked = !(i.checked);\n      }\n    });\n    this.setState(taskArray);\n  }\n\n  render() {\n    return (\n      <div className=\"container center\">\n        <h1 className=\"center title\">To Do with ReactJS</h1>\n        <hr className=\"hr\"/>\n        <div className=\"flow-right controls\">\n          <span>All tasks added: {this.state.tasks.length} </span>\n          <span>Tasks remaining: {this.state.tasks.filter((i) => { return !(i.checked) }).length} </span>\n        </div>\n        <hr className=\"hr\"/>\n        <div>\n          <ul id=\"todo-list\" className=\"todo-list\">\n            {this.state.tasks.map((x) => {\n              return (\n                <li>\n                  <input type=\"checkbox\"\n                         onChange={() => this.toggleTask(x)}\n                         id={x.item}/>\n                  {x.item}\n                  <button className=\"del button\"\n                          onClick={() => this.delTask(x)}>\n                    Delete this task\n                  </button>\n                </li>\n              );\n            })\n          }\n          </ul>\n          <button onClick={this.newTask.bind(this)} className=\"new button\">ADD TASK</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}